#pragma once

#include "entity.h"

#include "shape.h"

namespace Teardown { namespace Entities {
#pragma pack(push, 1)
	struct Joint : Entity {
		enum class Type : uint32_t {
			Ball = 1,
			Hinge = 2,
			Prismatic = 3,
			Wire = 4, // Do not use this, you will crash the game!
		};

		Shape* m_Attachment0;
		Shape* m_Attachment1;
		Joint* m_AttachmentJoint0;
		Joint* m_AttachmentJoint1;
		Type m_JointType;
		float m_Strength;
		uint8_t field_50;
		bool m_IsConnected; uint8_t pad_52[2];
		float m_Stiffness;
		int64_t field_58;
		int64_t field_60;
		Vector3_f32 m_AttachmentPosition0;
		Vector3_f32 m_AttachmentPosition1;
		Vector3_f32 m_AttachmentDirection0;
		Vector3_f32 m_AttachmentDirection1;
		Vector4_f32 m_Angle;
		Vector2_f32 m_Limits; // In meters or radians depending on joint type
		Vector2_f32 m_Motor;
		int64_t field_B8; // Pointer to unidentified structure; only used with Wire type
		bool field_C0; uint8_t pad_C1[7];

		inline static function_signature<bool(__fastcall*)(Joint* ptr, Entity* parent)> Constructor = { "\x40\x53\x48\x83\xEC\x20\x4C\x8B\xC2\x48\x8B\xD9\xBA\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xC7\x43\x2A\x2A\x2A\x2A\x2A\x48\x8D\x05\x2A\x2A\x2A\x2A\x48\x89\x03\x33\xC0\x48\x89\x43\x28\x48\x89\x43\x30\x48\x89\x43\x38\x48\x89\x43\x40\x89\x43\x48\x66\xC7\x43\x2A\x2A\x2A\xC7\x43\x2A\x2A\x2A\x2A\x2A\x48\xC7\x43\x2A\x2A\x2A\x2A\x2A\x48\x89\x43\x60\x48\x89\x43\x68\x48\x89\x43\x70\x48\x89\x43\x78\x48\x89\x83\x2A\x2A\x2A\x2A\x48\x89\x83\x2A\x2A\x2A\x2A\x48\x89\x83\x2A\x2A\x2A\x2A\x48\x89\x83\x2A\x2A\x2A\x2A\x89\x83\x2A\x2A\x2A\x2A\x48\xC7\x83\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x48\x89\x83\x2A\x2A\x2A\x2A\x89\x83\x2A\x2A\x2A\x2A\x48\x89\x83\x2A\x2A\x2A\x2A\x88\x83\x2A\x2A\x2A\x2A\x48\x8B\xC3\x48\x83\xC4\x20\x5B\xC3" };
		inline static function_signature<bool(__fastcall*)(Joint* ptr, Shape& shape_0, Shape& shape_1, const Vector3_f32& pos_0, const Vector3_f32& pos_1)> Attach = { "\x48\x89\x5C\x24\x2A\x48\x89\x74\x24\x2A\x57\x48\x83\xEC\x30\x48\x89\x51\x28\x48\x8B\xF1\x4C\x89\x41\x30\x49\x8B\xF8\x48\x8D\x4A\x34\x48\x8B\xDA\x48\x8D\x54\x24\x2A\x4D\x8B\xC1\xE8\x2A\x2A\x2A\x2A\x4C\x8B\x44\x24\x2A\x48\x8D\x4F\x34\x48\x8D\x54\x24\x2A\xF3\x0F\x10\x40\x2A\xF3\x0F\x10\x10\xF3\x0F\x58\x43\x2A\xF3\x0F\x10\x48\x2A\xF3\x0F\x58\x53\x2A\xF3\x0F\x58\x4B\x2A\xF3\x0F\x11\x44\x24\x2A\x8B\x44\x24\x28\x0F\x28\xC2\x0F\x14\xC1\xF2\x0F\x11\x46\x2A\x89\x46\x70\xE8" };
		inline static function_signature<bool(__fastcall*)(Joint* ptr)> UpdateAngle = { "\x40\x53\x48\x83\xEC\x40\x48\x8B\x41\x28\x48\x8B\xD9\x48\x85\xC0\x74\x6D\x4C\x8B\x41\x30\x4D\x85\xC0\x74\x64\x48\x8B\x40\x10\x48\x8D\x54\x24\x2A\xF3\x0F\x10\x15\x2A\x2A\x2A\x2A\x48\x8D\x4C\x24\x2A\x4D\x8B\x40\x10\x49\x83\xC0\x34\xF3\x0F\x10\x40\x2A\xF3\x0F\x10\x48\x2A\x0F\x57\xC2\xF3\x0F\x11\x44\x24\x2A\x0F\x57\xCA\xF3\x0F\x10\x40\x2A\x0F\x57\xC2\xF3\x0F\x11\x4C\x24\x2A\xF3\x0F\x11\x44\x24\x2A\xF3\x0F\x10\x40\x2A\xF3\x0F\x11\x44\x24\x2A\xE8\x2A\x2A\x2A\x2A\x0F\x10\x44\x24\x2A\x0F\x11\x83\x2A\x2A\x2A\x2A\x48\x83\xC4\x40\x5B\xC3" };
	};

	static_assert(sizeof(Joint) == 0xC8u, "Joint size is incorrect!");
	static_assert(sizeof(Joint::Type) == 0x4u, "Joint::Type size is incorrect!");
#pragma pack(pop)
} }